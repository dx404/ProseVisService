#
# Generated by RDF2ZZConverter v1.4.11.8693M on Mon Jul 15 06:45:49 CDT 2013
#
# @name 	Service Process TEI XML through OpenMary
# @description 	<font face="tahoma, arial, helvetica, sans-serif"><span style="font-size: 12px;">Used as part of&nbsp;</span></font>ProseVis. For more information, see:<div>http://tclement.ischool.utexas.edu/ProseVis/data/index.php</div>
# @creator 	admin
# @date 	Tue Feb 12 19:16:14 CST 2013
# @rights 	<pre>
#         	University of Illinois/NCSA
#         	Open Source License
#         	
#         	Copyright (c) 2008, NCSA.  All rights reserved.
#         	
#         	Developed by:
#         	The Automated Learning Group
#         	University of Illinois at Urbana-Champaign
#         	http://www.seasr.org
#         	
#         	Permission is hereby granted, free of charge, to any person obtaining
#         	a copy of this software and associated documentation files (the
#         	"Software"), to deal with the Software without restriction, including
#         	without limitation the rights to use, copy, modify, merge, publish,
#         	distribute, sublicense, and/or sell copies of the Software, and to
#         	permit persons to whom the Software is furnished to do so, subject
#         	to the following conditions:
#         	
#         	Redistributions of source code must retain the above copyright
#         	notice, this list of conditions and the following disclaimers.
#         	
#         	Redistributions in binary form must reproduce the above copyright
#         	notice, this list of conditions and the following disclaimers in
#         	the documentation and/or other materials provided with the distribution.
#         	
#         	Neither the names of The Automated Learning Group, University of
#         	Illinois at Urbana-Champaign, nor the names of its contributors may
#         	be used to endorse or promote products derived from this Software
#         	without specific prior written permission.
#         	
#         	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#         	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#         	MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#         	IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE
#         	FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
#         	CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#         	WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
#         	</pre>
# @tags 	prosevis, openmary, tei, phoneme, xml
# @uri  	meandre://seasr.org/services/service-process-tei-xml-through-openmary/
#

#
# Specify component imports
#
# TODO: Add component import statement(s) here
# Example: import <URL>   (replace 'URL' with the correct location)

#
# Create the component aliases
#
alias <meandre://seasr.org/components/foundry/read-text> as READ_TEXT
alias <meandre://seasr.org/components/foundry/text-format> as TEXT_FORMAT
alias <meandre://seasr.org/components/foundry/send-email> as SEND_EMAIL
alias <meandre://seasr.org/components/foundry/push-text> as PUSH_TEXT
alias <meandre://seasr.org/components/foundry/read-xml> as READ_XML
alias <meandre://seasr.org/components/foundry/openmary-client> as OPENMARY_CLIENT
alias <meandre://seasr.org/components/foundry/abort-execution> as ABORT_EXECUTION
alias <meandre://seasr.org/components/foundry/search-text> as SEARCH_TEXT
alias <meandre://seasr.org/components/foundry/flow-parameter> as FLOW_PARAMETER
alias <meandre://seasr.org/components/foundry/add-tuple-attribute> as ADD_TUPLE_ATTRIBUTE
alias <meandre://seasr.org/components/foundry/fork-x2> as FORK_X2
alias <meandre://seasr.org/components/foundry/csv-to-tuple> as CSV_TO_TUPLE
alias <meandre://seasr.org/components/foundry/fork-x5> as FORK_X5
alias <meandre://seasr.org/components/foundry/tuple-to-csv> as TUPLE_TO_CSV
alias <meandre://seasr.org/components/foundry/write-to-archive> as WRITE_TO_ARCHIVE
alias <meandre://seasr.org/components/foundry/select-nodes-via-xpath> as SELECT_NODES_VIA_XPATH
alias <meandre://seasr.org/components/foundry/text-cleaner> as TEXT_CLEANER
alias <meandre://seasr.org/components/foundry/xml-to-xml-with-xsl> as XML_TO_XML_WITH_XSL
alias <meandre://seasr.org/components/foundry/trigger-message> as TRIGGER_MESSAGE
alias <meandre://seasr.org/components/foundry/tuple-aggregator> as TUPLE_AGGREGATOR
alias <meandre://seasr.org/components/foundry/stream-delimiter-filter> as STREAM_DELIMITER_FILTER

#
# Create the component instances
#
mary_to_csv_xsl = PUSH_TEXT()
xml_to_xml_with_xsl = XML_TO_XML_WITH_XSL()
email_subject = TEXT_FORMAT()
abort_execution = ABORT_EXECUTION()
csv_to_tuple = CSV_TO_TUPLE()
delimiter_filter = STREAM_DELIMITER_FILTER()
xpath_section_id = SELECT_NODES_VIA_XPATH()
xml_to_xml_with_xsl_2 = XML_TO_XML_WITH_XSL()
text_cleaner = TEXT_CLEANER()
push_text = PUSH_TEXT()
xpath_text = SELECT_NODES_VIA_XPATH()
fork_x2 = FORK_X2()
send_email = SEND_EMAIL()
trigger_message = TRIGGER_MESSAGE()
read_text = READ_TEXT()
add_seasr_id_xsl = PUSH_TEXT()
delimiter_filter_2 = STREAM_DELIMITER_FILTER()
delimiter_filter_3 = STREAM_DELIMITER_FILTER()
fork_x2_2 = FORK_X2()
tuple_to_csv = TUPLE_TO_CSV()
xpath = SELECT_NODES_VIA_XPATH()
delimiter_filter_4 = STREAM_DELIMITER_FILTER()
text_cleaner_2 = TEXT_CLEANER()
trigger_message_2 = TRIGGER_MESSAGE()
read_xml = READ_XML()
fork_x2_3 = FORK_X2()
tei_file = FLOW_PARAMETER()
xml_to_xml_with_xsl_3 = XML_TO_XML_WITH_XSL()
add_tuple_attribute = ADD_TUPLE_ATTRIBUTE()
delimiter_filter_5 = STREAM_DELIMITER_FILTER()
xml_to_xml_with_xsl_4 = XML_TO_XML_WITH_XSL()
text_format = TEXT_FORMAT()
token = FLOW_PARAMETER()
xpath_node_id = SELECT_NODES_VIA_XPATH()
tuple_aggregator = TUPLE_AGGREGATOR()
fork_x5 = FORK_X5()
openmary_client = OPENMARY_CLIENT()
read_text_2 = READ_TEXT()
search_text = SEARCH_TEXT()
add_tuple_attribute_2 = ADD_TUPLE_ATTRIBUTE()
add_tuple_attribute_3 = ADD_TUPLE_ATTRIBUTE()
delimiter_filter_6 = STREAM_DELIMITER_FILTER()
read_text_3 = READ_TEXT()
lg_to_p_xsl = PUSH_TEXT()
write_to_archive = WRITE_TO_ARCHIVE()
xpath_node_name = SELECT_NODES_VIA_XPATH()
search_text_2 = SEARCH_TEXT()
read_text_4 = READ_TEXT()
delimiter_filter_7 = STREAM_DELIMITER_FILTER()
text_format_2 = TEXT_FORMAT()
preproc_xsl_file = PUSH_TEXT()
stream_delimiter_filter = STREAM_DELIMITER_FILTER()
text_format_3 = TEXT_FORMAT()
email_from = PUSH_TEXT()
trigger_message_3 = TRIGGER_MESSAGE()
email_to = FLOW_PARAMETER()
delimiter_filter_2 = STREAM_DELIMITER_FILTER()

#
# Set component properties
#
mary_to_csv_xsl._ignore_errors = "false"
mary_to_csv_xsl.message = "/data/matt/tanya/mary-to-csv.xsl"
mary_to_csv_xsl._debug_level = "info"

xml_to_xml_with_xsl._debug_level = "info"
xml_to_xml_with_xsl._ignore_errors = "false"

email_subject.num_inputs_used = "1"
email_subject._debug_level = "info"
email_subject.format = "Job results for: %s"
email_subject._ignore_errors = "false"

abort_execution._debug_level = "info"
abort_execution._ignore_errors = "false"

csv_to_tuple._ignore_errors = "false"
csv_to_tuple.header = "true"
csv_to_tuple.separator = "\\t"
csv_to_tuple.labels = ""
csv_to_tuple._debug_level = "info"

delimiter_filter._debug_level = "info"
delimiter_filter.advanced_filter = "0"
delimiter_filter._stream_id = "3"
delimiter_filter._ignore_errors = "false"

xpath_section_id.wrap_stream = "false"
xpath_section_id.namespaces = "seasr=http://www.seasr.org/ns/services/openmary/tei/1.0"
xpath_section_id.qname = "NODESET"
xpath_section_id._ignore_errors = "false"
xpath_section_id.xpath = "/*/@seasr:sid"
xpath_section_id._stream_id = "0"
xpath_section_id._debug_level = "info"

xml_to_xml_with_xsl_2._debug_level = "info"
xml_to_xml_with_xsl_2._ignore_errors = "false"

text_cleaner.replace4 = ""
text_cleaner.replace3 = ""
text_cleaner.replace2 = ""
text_cleaner.replace = ""
text_cleaner._ignore_errors = "false"
text_cleaner.find = "(?m)-\\s*$\\s*"
text_cleaner.find4 = ""
text_cleaner.find3 = ""
text_cleaner.find2 = ""
text_cleaner._debug_level = "info"

push_text._debug_level = "info"
push_text.message = "Error encountered during flow execution"
push_text._ignore_errors = "false"

xpath_text.wrap_stream = "false"
xpath_text.namespaces = "seasr=http://www.seasr.org/ns/services/openmary/tei/1.0"
xpath_text.qname = "NODESET"
xpath_text._ignore_errors = "false"
xpath_text.xpath = "/*/text()"
xpath_text._stream_id = "0"
xpath_text._debug_level = "info"

fork_x2.replication_mode = "0"
fork_x2._debug_level = "info"
fork_x2.replication_method_name = ""
fork_x2._ignore_errors = "false"

send_email._debug_level = "info"
send_email.format = "text/plain"
send_email._ignore_errors = "false"
send_email.smtp_server = "smtp.ncsa.uiuc.edu"

trigger_message.reset_on_push = "false"
trigger_message._debug_level = "info"
trigger_message._stream_id = "3"
trigger_message._ignore_errors = "false"

read_text.retry_on_timeout = "true"
read_text.read_timeout = "0"
read_text.max_attempts = "1"
read_text._ignore_errors = "false"
read_text.retry_on_http_error = "0"
read_text.retry_delay = "1000"
read_text.connection_timeout = "0"
read_text._debug_level = "info"

add_seasr_id_xsl._debug_level = "info"
add_seasr_id_xsl.message = "/data/matt/tanya/add-seasr-id.xsl"
add_seasr_id_xsl._ignore_errors = "false"

delimiter_filter_2.advanced_filter = "1"
delimiter_filter_2._debug_level = "info"
delimiter_filter_2._stream_id = "3"
delimiter_filter_2._ignore_errors = "false"

delimiter_filter_3.advanced_filter = ""
delimiter_filter_3._debug_level = "info"
delimiter_filter_3._stream_id = ""
delimiter_filter_3._ignore_errors = "false"

fork_x2_2.replication_mode = "0"
fork_x2_2._debug_level = "info"
fork_x2_2.replication_method_name = ""
fork_x2_2._ignore_errors = "false"

tuple_to_csv._debug_level = "info"
tuple_to_csv.separator = "\\t"
tuple_to_csv._ignore_errors = "false"
tuple_to_csv.header = "true"

xpath.wrap_stream = "true"
xpath.namespaces = "seasr=http://www.seasr.org/ns/services/openmary/tei/1.0"
xpath.qname = "NODESET"
xpath._ignore_errors = "false"
xpath.xpath = "/document/*"
xpath._stream_id = "1"
xpath._debug_level = "info"

delimiter_filter_4._debug_level = "info"
delimiter_filter_4.advanced_filter = "0"
delimiter_filter_4._stream_id = "3"
delimiter_filter_4._ignore_errors = "false"

text_cleaner_2.replace4 = ""
text_cleaner_2.replace3 = ""
text_cleaner_2.replace2 = ""
text_cleaner_2.replace = "$1$2"
text_cleaner_2._ignore_errors = "false"
text_cleaner_2.find = "(?:.*/)?([^/]+)(\\.[^\\.]+)"
text_cleaner_2.find4 = ""
text_cleaner_2.find3 = ""
text_cleaner_2.find2 = ""
text_cleaner_2._debug_level = "info"

trigger_message_2.reset_on_push = "false"
trigger_message_2._debug_level = "info"
trigger_message_2._stream_id = "0"
trigger_message_2._ignore_errors = "false"

read_xml._debug_level = "info"
read_xml._ignore_errors = "false"
read_xml.validate_dtd = "false"

fork_x2_3.replication_mode = "0"
fork_x2_3._debug_level = "info"
fork_x2_3.replication_method_name = ""
fork_x2_3._ignore_errors = "false"

tei_file.default_value = ""
tei_file._debug_level = "info"
tei_file.param_name = "tei_url"
tei_file._stream_id = "3"
tei_file.wrap_stream = "true"
tei_file._ignore_errors = "false"

xml_to_xml_with_xsl_3._debug_level = "info"
xml_to_xml_with_xsl_3._ignore_errors = "false"

add_tuple_attribute._debug_level = "info"
add_tuple_attribute.attribute_name = "tei_node_id"
add_tuple_attribute._ignore_errors = "false"

delimiter_filter_5._debug_level = "info"
delimiter_filter_5.advanced_filter = ""
delimiter_filter_5._stream_id = "1"
delimiter_filter_5._ignore_errors = "false"

xml_to_xml_with_xsl_4._debug_level = "info"
xml_to_xml_with_xsl_4._ignore_errors = "false"

text_format.num_inputs_used = "1"
text_format._debug_level = "info"
text_format.format = "Note: This is an automatically generated email - do not reply!\\n\\nYour document has been successfully processed. You can access your results at the following link:\\nhttp://leovip023.ncsa.uiuc.edu/%s\\n\\nThank you.\\n"
text_format._ignore_errors = "false"

token.default_value = ""
token._debug_level = "info"
token.param_name = "token"
token._stream_id = "0"
token._ignore_errors = "false"
token.wrap_stream = "false"

xpath_node_id.namespaces = "seasr=http://www.seasr.org/ns/services/openmary/tei/1.0"
xpath_node_id.wrap_stream = "false"
xpath_node_id.qname = "NODESET"
xpath_node_id._ignore_errors = "false"
xpath_node_id.xpath = "/*/@seasr:id"
xpath_node_id._stream_id = "0"
xpath_node_id._debug_level = "info"

tuple_aggregator._debug_level = "info"
tuple_aggregator._stream_id = "1"
tuple_aggregator._ignore_errors = "false"

fork_x5.replication_mode = "0"
fork_x5.replication_method_name = ""
fork_x5._debug_level = "info"
fork_x5._ignore_errors = "false"

openmary_client.input_type = "TEXT"
openmary_client.server_hostname = "localhost"
openmary_client.server_port = "59125"
openmary_client._ignore_errors = "false"
openmary_client.output_type = "INTONATION"
openmary_client.locale = "en-US"
openmary_client.audio_type = "WAVE"
openmary_client._debug_level = "info"

read_text_2.retry_on_timeout = "true"
read_text_2.read_timeout = "0"
read_text_2.max_attempts = "1"
read_text_2._ignore_errors = "false"
read_text_2.retry_on_http_error = "0"
read_text_2.retry_delay = "1000"
read_text_2.connection_timeout = "0"
read_text_2._debug_level = "info"

search_text._debug_level = "info"
search_text._stream_id = "0"
search_text.expression = "([^/]+)(?:\\.[^\\.]+)$"
search_text._ignore_errors = "false"
search_text.wrap_stream = "false"

add_tuple_attribute_2._debug_level = "info"
add_tuple_attribute_2.attribute_name = "tei_section_id"
add_tuple_attribute_2._ignore_errors = "false"

add_tuple_attribute_3._debug_level = "info"
add_tuple_attribute_3.attribute_name = "tei_node_type"
add_tuple_attribute_3._ignore_errors = "false"

delimiter_filter_6.advanced_filter = "1"
delimiter_filter_6._debug_level = "info"
delimiter_filter_6._stream_id = "3"
delimiter_filter_6._ignore_errors = "false"

read_text_3.retry_on_timeout = "true"
read_text_3.read_timeout = "0"
read_text_3.max_attempts = "1"
read_text_3._ignore_errors = "false"
read_text_3.retry_on_http_error = "0"
read_text_3.retry_delay = "1000"
read_text_3.connection_timeout = "0"
read_text_3._debug_level = "info"

lg_to_p_xsl._debug_level = "info"
lg_to_p_xsl.message = "/data/matt/tanya/lg-to-p.xsl"
lg_to_p_xsl._ignore_errors = "false"

write_to_archive.default_folder = "/data/seasr/www/seasr/prosevis/results"
write_to_archive.append_extension = "true"
write_to_archive.archive_format = "zip"
write_to_archive._ignore_errors = "false"
write_to_archive.timestamp_format = "yyyy-MM-dd-HH-mm-ss"
write_to_archive._stream_id = "3"
write_to_archive.append_timestamp = "true"
write_to_archive._debug_level = "info"

xpath_node_name.wrap_stream = "false"
xpath_node_name.namespaces = "seasr=http://www.seasr.org/ns/services/openmary/tei/1.0"
xpath_node_name.qname = "STRING"
xpath_node_name._ignore_errors = "false"
xpath_node_name.xpath = "/*/name()"
xpath_node_name._stream_id = "0"
xpath_node_name._debug_level = "info"

search_text_2._debug_level = "info"
search_text_2._stream_id = "0"
search_text_2.expression = "/data/seasr/www/(.+)"
search_text_2.wrap_stream = "false"
search_text_2._ignore_errors = "false"

read_text_4.retry_on_timeout = "true"
read_text_4.read_timeout = "0"
read_text_4.max_attempts = "1"
read_text_4._ignore_errors = "false"
read_text_4.retry_on_http_error = "0"
read_text_4.retry_delay = "1000"
read_text_4.connection_timeout = "0"
read_text_4._debug_level = "info"

delimiter_filter_7._debug_level = "info"
delimiter_filter_7.advanced_filter = ""
delimiter_filter_7._stream_id = "1"
delimiter_filter_7._ignore_errors = "false"

text_format_2.num_inputs_used = "1"
text_format_2._debug_level = "info"
text_format_2.format = "%s.tsv"
text_format_2._ignore_errors = "false"

preproc_xsl_file._debug_level = "info"
preproc_xsl_file.message = "/data/matt/tanya/tei-to-document-idonly-concatlg.xsl"
preproc_xsl_file._ignore_errors = "false"

stream_delimiter_filter.advanced_filter = ""
stream_delimiter_filter._debug_level = "info"
stream_delimiter_filter._stream_id = ""
stream_delimiter_filter._ignore_errors = "false"

text_format_3.num_inputs_used = "1"
text_format_3._debug_level = "info"
text_format_3.format = "Note: This is an automatically generated email - do not reply!\\n\\nUnfortunately your document did not process successfully. Please see below for the error encountered:\\n\\n%s\\n\\nSorry for any inconvenience."
text_format_3._ignore_errors = "false"

email_from._debug_level = "info"
email_from.message = "meandre@seasr.org"
email_from._ignore_errors = "false"

trigger_message_3.reset_on_push = "false"
trigger_message_3._debug_level = "info"
trigger_message_3._stream_id = "0"
trigger_message_3._ignore_errors = "false"

email_to.default_value = ""
email_to._debug_level = "info"
email_to.param_name = "email_to"
email_to._stream_id = "0"
email_to._ignore_errors = "false"
email_to.wrap_stream = "false"

delimiter_filter_2.advanced_filter = ""
delimiter_filter_2._debug_level = "info"
delimiter_filter_2._stream_id = ""
delimiter_filter_2._ignore_errors = "false"

#
# Create the flow by connecting the components
#
@delimiter_filter_7_outputs = delimiter_filter_7()
@delimiter_filter_5_outputs = delimiter_filter_5()
@xpath_section_id_outputs = xpath_section_id()
@delimiter_filter_6_outputs = delimiter_filter_6()
@delimiter_filter_3_outputs = delimiter_filter_3()
@delimiter_filter_4_outputs = delimiter_filter_4()
@add_seasr_id_xsl_outputs = add_seasr_id_xsl()
@delimiter_filter_2_outputs = delimiter_filter_2()
@xml_to_xml_with_xsl_outputs = xml_to_xml_with_xsl()
@preproc_xsl_file_outputs = preproc_xsl_file()
@tuple_aggregator_outputs = tuple_aggregator()
@search_text_outputs = search_text()
@openmary_client_outputs = openmary_client()
@tuple_to_csv_outputs = tuple_to_csv()
@email_from_outputs = email_from()
@text_format_2_outputs = text_format_2()
@text_format_3_outputs = text_format_3()
@csv_to_tuple_outputs = csv_to_tuple()
@read_xml_outputs = read_xml()
@stream_delimiter_filter_outputs = stream_delimiter_filter()
@trigger_message_outputs = trigger_message()
@lg_to_p_xsl_outputs = lg_to_p_xsl()
@text_format_outputs = text_format()
@read_text_outputs = read_text()
@fork_x2_outputs = fork_x2()
@text_cleaner_outputs = text_cleaner()
@text_cleaner_2_outputs = text_cleaner_2()
@fork_x5_outputs = fork_x5()
@email_subject_outputs = email_subject()
@search_text_2_outputs = search_text_2()
@send_email_outputs = send_email()
@trigger_message_3_outputs = trigger_message_3()
@xpath_node_id_outputs = xpath_node_id()
@xml_to_xml_with_xsl_3_outputs = xml_to_xml_with_xsl_3()
@trigger_message_2_outputs = trigger_message_2()
@xml_to_xml_with_xsl_4_outputs = xml_to_xml_with_xsl_4()
@fork_x2_3_outputs = fork_x2_3()
@tei_file_outputs = tei_file()
@fork_x2_2_outputs = fork_x2_2()
@xpath_outputs = xpath()
@xpath_text_outputs = xpath_text()
@token_outputs = token()
@write_to_archive_outputs = write_to_archive()
@xml_to_xml_with_xsl_2_outputs = xml_to_xml_with_xsl_2()
@xpath_node_name_outputs = xpath_node_name()
@push_text_outputs = push_text()
@delimiter_filter_outputs = delimiter_filter()
@read_text_2_outputs = read_text_2()
@email_to_outputs = email_to()
@read_text_3_outputs = read_text_3()
@read_text_4_outputs = read_text_4()
@add_tuple_attribute_3_outputs = add_tuple_attribute_3()
@add_tuple_attribute_2_outputs = add_tuple_attribute_2()
@add_tuple_attribute_outputs = add_tuple_attribute()
@mary_to_csv_xsl_outputs = mary_to_csv_xsl()

trigger_message_3(
	trigger: text_format_3_outputs.text;
	object: push_text_outputs.text
)
xpath_node_id(xml: fork_x5_outputs.object3)
delimiter_filter_7(object: tuple_aggregator_outputs.meta_tuple)
xml_to_xml_with_xsl_3(
	xsl: read_text_outputs.text;
	xml: read_xml_outputs.xml
)
trigger_message_2(
	object: trigger_message_3_outputs.object;
	trigger: send_email_outputs.text
)
xml_to_xml_with_xsl_4(
	xsl: read_text_3_outputs.text;
	xml: openmary_client_outputs.bytes
)
delimiter_filter_5(object: tuple_aggregator_outputs.tuples)
xpath_section_id(xml: fork_x5_outputs.object4)
delimiter_filter_6(object: fork_x2_outputs.object)
delimiter_filter_3(object: search_text_outputs.text_found)
delimiter_filter_4(object: text_format_2_outputs.text)
delimiter_filter_2(
	object: write_to_archive_outputs.location;
	object: fork_x2_2_outputs.object2
)
fork_x2_3(object: token_outputs.text)
xpath(xml: xml_to_xml_with_xsl_2_outputs.xml_or_text)
fork_x2_2(object: xml_to_xml_with_xsl_3_outputs.xml_or_text)
xpath_text(xml: fork_x5_outputs.object)
xml_to_xml_with_xsl(
	xsl: read_text_2_outputs.text;
	xml: fork_x2_2_outputs.object
)
tuple_aggregator(
	meta_tuple: add_tuple_attribute_2_outputs.meta_tuple;
	tuples: add_tuple_attribute_2_outputs.tuples
)
search_text(text: fork_x2_outputs.object2)
write_to_archive(
	file_name: delimiter_filter_4_outputs.object;
	data: delimiter_filter_2_outputs.object;
	file_name: delimiter_filter_6_outputs.object;
	data: delimiter_filter_outputs.object;
	location: fork_x2_3_outputs.object
)
xml_to_xml_with_xsl_2(
	xml: xml_to_xml_with_xsl_outputs.xml_or_text;
	xsl: read_text_4_outputs.text
)
xpath_node_name(xml: fork_x5_outputs.object2)
openmary_client(text: text_cleaner_outputs.text)
tuple_to_csv(
	meta_tuple: delimiter_filter_7_outputs.object;
	tuples: trigger_message_outputs.trigger
)
text_format_2(text1: trigger_message_outputs.object)
text_format_3(text1: stream_delimiter_filter_outputs.object)
csv_to_tuple(text: xml_to_xml_with_xsl_4_outputs.xml_or_text)
read_xml(location: tei_file_outputs.text)
delimiter_filter(object: tuple_to_csv_outputs.text)
read_text_2(location: lg_to_p_xsl_outputs.text)
read_text_3(location: mary_to_csv_xsl_outputs.text)
abort_execution(object: trigger_message_2_outputs.object)
read_text_4(location: preproc_xsl_file_outputs.text)
stream_delimiter_filter(
	object: add_tuple_attribute_outputs.error;
	object: text_cleaner_outputs.error;
	object: tuple_aggregator_outputs.error;
	object: xml_to_xml_with_xsl_3_outputs.error;
	object: read_text_2_outputs.error;
	object: add_tuple_attribute_3_outputs.error;
	object: text_cleaner_2_outputs.error;
	object: xpath_outputs.error;
	object: xml_to_xml_with_xsl_4_outputs.error;
	object: search_text_outputs.error;
	object: xpath_text_outputs.error;
	object: xpath_section_id_outputs.error;
	object: search_text_2_outputs.error;
	object: xpath_node_id_outputs.error;
	object: read_xml_outputs.error;
	object: xml_to_xml_with_xsl_outputs.error;
	object: read_text_outputs.error;
	object: add_tuple_attribute_2_outputs.error;
	object: read_text_3_outputs.error;
	object: read_text_4_outputs.error;
	object: openmary_client_outputs.error;
	object: xml_to_xml_with_xsl_2_outputs.error;
	object: tuple_to_csv_outputs.error;
	object: write_to_archive_outputs.error;
	object: xpath_node_name_outputs.error;
	object: csv_to_tuple_outputs.error
)
trigger_message(
	object: delimiter_filter_3_outputs.object;
	trigger: delimiter_filter_5_outputs.object
)
add_tuple_attribute_3(
	tuples: csv_to_tuple_outputs.tuples;
	meta_tuple: csv_to_tuple_outputs.meta_tuple;
	attribute: xpath_node_name_outputs.xml_or_text
)
add_tuple_attribute_2(
	meta_tuple: add_tuple_attribute_outputs.meta_tuple;
	attribute: xpath_section_id_outputs.xml_or_text;
	tuples: add_tuple_attribute_outputs.tuples
)
text_format(text1: search_text_2_outputs.text_found)
fork_x2(object: text_cleaner_2_outputs.text)
read_text(location: add_seasr_id_xsl_outputs.text)
text_cleaner(text: xpath_text_outputs.xml_or_text)
text_cleaner_2(text: read_xml_outputs.location)
fork_x5(object: xpath_outputs.xml_or_text)
add_tuple_attribute(
	meta_tuple: add_tuple_attribute_3_outputs.meta_tuple;
	tuples: add_tuple_attribute_3_outputs.tuples;
	attribute: xpath_node_id_outputs.xml_or_text
)
email_subject(text1: fork_x2_3_outputs.object2)
search_text_2(text: delimiter_filter_2_outputs.object)
send_email(
	body_text: trigger_message_3_outputs.trigger;
	body_text: text_format_outputs.text;
	subject: email_subject_outputs.text;
	email_to: email_to_outputs.text;
	email_from: email_from_outputs.text
)

